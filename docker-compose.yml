x-consumer: &consumer
  build: ./03_Consumer_(Eigenentwicklung)
  depends_on:
    - rabbitmq
  networks:
    - backend

x-mongo: &mongo
  image: mongo:7.0
  command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
  networks:
    - backend
  volumes:
    - ./04_MongoDB/mongo_data:/data/db
    - ./04_MongoDB/mongo_config:/data/configdb

x-viewer: &viewer
  build: ./05_Stock-Liveview_(Frontend)
  environment:
    - MONGODB_URL=mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
    - MONGODB_DB=stockmarket
    - MONGODB_COLLECTION=stocks
  depends_on:
    - mongo1
    - mongo2
    - mongo3
    - rabbitmq
    - pub
  networks:
    - backend
    - frontend

services:
  pub:
    build: ./01_stock-publisher(publisher)
    container_name: stockPublisher
    environment:
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672/
    restart: always
    depends_on:
      - rabbitmq
    networks:
      - backend

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    restart: always
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    ports:
      - 5672:5672   # für message transfers
      - 15672:15672 # für management Dashboard
    environment:
      - RABBITMQ_DEFAULT_USER=stockmarket
      - RABBITMQ_DEFAULT_PASS=supersecret123
    networks:
      - backend

  # DB-Cluster
  mongo1:
    container_name: mongo1
    <<: *mongo
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    healthcheck:
      test: echo "rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo1:27017',priority:1},{_id:1,host:'mongo2:27018',priority:0.5},{_id:2,host:'mongo3:27019',priority:0.5}]})" | mongosh --port 27017 --quiet && echo "rs.status()" | mongosh --port 27017 --quiet
      interval: 1m
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - ./04_MongoDB/mongo1_data:/data/db
      - ./04_MongoDB/mongo1_config:/data/configdb
    ports:
      - 27017:27017

  mongo2:
    container_name: mongo2
    <<: *mongo
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    volumes:
      - ./04_MongoDB/mongo2_data:/data/db
      - ./04_MongoDB/mongo2_config:/data/configdb
    ports:
      - 27018:27018

  mongo3:
    container_name: mongo3
    <<: *mongo
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    volumes:
      - ./04_MongoDB/mongo3_data:/data/db
      - ./04_MongoDB/mongo3_config:/data/configdb
    ports:
      - 27019:27019

  consumer1:
    container_name: consumer1
    <<: *consumer
    environment:
      - QUEUENAME=AAPL
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672/
      - MONGODB_URL=mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0

  consumer2:
    container_name: consumer2
    <<: *consumer
    environment:
      - QUEUENAME=MSFT
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672/
      - MONGODB_URL=mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0

  consumer3:
    container_name: consumer3
    <<: *consumer
    environment:
      - QUEUENAME=TSLA
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672/
      - MONGODB_URL=mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
      
  live-viewer1:
    container_name: stockViewer1
    <<: *viewer
    ports:
      - 3000:3000

  live-viewer2:
    container_name: stockViewer2
    <<: *viewer
    ports:
      - 3001:3000

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - 8080:80
    volumes:
      - ./06_nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - live-viewer1
      - live-viewer2
    networks:
      - frontend

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

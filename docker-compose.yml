services:
  pub:
    #build: ./01_stock-publisher(publisher) 
    image: devtigr/ta_publisher ##von mir gepushtes image src von Patricks GitHub
    container_name: stockPublisher
    environment:
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672/
    restart: always
    depends_on:
      - rabbitmq
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - 5672:5672   # für message transfers
      - 15672:15672 # für management Dashboard
    environment:
      - RABBITMQ_DEFAULT_USER=stockmarket
      - RABBITMQ_DEFAULT_PASS=supersecret123
    networks:
      - backend

  #DB-Cluster
  mongo1:
    #nur einmal
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 1s
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongodb
      - MONGO_INITDB_ROOT_PASSWORD=supersecret321
    #extra_hosts:
    #  - "host.docker.internal:host-gateway"
    ports:
      - 27017:27017
    networks:
      - dbcluster
    volumes:
      - ./04_MongoDB_(Clustered)/mongo1_data:/data/db
      - ./04_MongoDB_(Clustered)/mongo1_config:/data/configdb
  mongo2:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    #extra_hosts:
    #  - "host.docker.internal:host-gateway"
    ports:
      - 27018:27018
    networks:
      - dbcluster
    volumes:
      - ./04_MongoDB_(Clustered)/mongo2_data:/data/db
      - ./04_MongoDB_(Clustered)/mongo2_config:/data/configdb
  mongo3:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    #extra_hosts:
    #  - "host.docker.internal:host-gateway"
    ports:
      - 27019:27019
    networks:
      - dbcluster
    volumes:
      - ./04_MongoDB_(Clustered)/mongo3_data:/data/db
      - ./04_MongoDB_(Clustered)/mongo3_config:/data/configdb

  consumer1:
    build: ./03_Consumer_(Eigenentwicklung)
    environment:
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672/        
      - MONGODB_URL=mongodb://mongodb:supersecret321@mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
      - QUEUENAME=AAPL
    depends_on:
      - rabbitmq
    networks:
      - backend
  consumer2:
    build: ./03_Consumer_(Eigenentwicklung)
    environment:
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672/        
      - MONGODB_URL=mongodb://mongodb:supersecret321@mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
      - QUEUENAME=MSFT
    depends_on:
      - rabbitmq
    networks:
      - backend
  consumer3:
    build: ./03_Consumer_(Eigenentwicklung)
    environment:
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672/        
      - MONGODB_URL=mongodb://mongodb:supersecret321@mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
      - QUEUENAME=TSLA
    depends_on:
      - rabbitmq
    networks:
      - backend   

  live-viever1:
    build: ./05_Stock-Liveview_(Frontend)
    container_name: stockViever1
    environment:
      - MONGODB_URL=mongodb://127.0.0.1:27017,127.0.0.1:27018,127.0.0.1:27019/?replicaSet=rs0
      - MONGODB_DB:stockmarket
      - MONGODB_COLLECTION:stocks
    ports:
      - 3000:3000
    networks:
      - frontend
      - backend
  live-viever2:
    build: ./05_Stock-Liveview_(Frontend)
    container_name: stockViever2
    environment:
      - MONGODB_URL=mongodb://127.0.0.1:27017,127.0.0.1:27018,127.0.0.1:27019/?replicaSet=rs0
      - MONGODB_DB:stockmarket
      - MONGODB_COLLECTION:stocks
    ports:
      - 3001:3000
    networks:
      - frontend
      - backend
  
  nginx: 
    image: nginx:latest
    ports:
      - 8080:80
    volumes:
      - ./06_nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - live-viever1
      - live-viever2

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
  dbcluster:
    driver: bridge
  
volumes:
  mongo1_data:
  mongo1_config:
  mongo2_data:
  mongo2_config:
  mongo3_data:
  mongo3_config:


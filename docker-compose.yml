services:
  pub:
    build: ./01_stock-publisher(publisher) 
    #image: ##von mir gepushtes image von Patricks GitHub
    container_name: stockPublisher
    environment:
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672/
    restart: always
    depends_on:
      - rabbitmq
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - 5672:5672   # für message transfers
      - 15672:15672 # für management Dashboard
    environment:
      - RABBITMQ_DEFAULT_USER=stockmarket
      - RABBITMQ_DEFAULT_PASS=supersecret123
    networks:
      - backend
      - frontend

  #DB-Cluster
  mongo1:
    #nur einmal
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 0s
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 27017:27017
    volumes:
      - ./04_MongoDB_(Clustered)/mongo1_data:/data/db
      - ./04_MongoDB_(Clustered)/mongo1_config:/data/configdb
  mongo2:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 27018:27018
    volumes:
      - ./04_MongoDB_(Clustered)/mongo2_data:/data/db
      - ./04_MongoDB_(Clustered)/mongo2_config:/data/configdb
  mongo3:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 27019:27019
    volumes:
      - ./04_MongoDB_(Clustered)/mongo3_data:/data/db
      - ./04_MongoDB_(Clustered)/mongo3_config:/data/configdb

  live-viever:
    build: ./05_Stock-Liveview_(Frontend)
    container_name: stockViever

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
  
volumes:
  mongo1_data:
  mongo1_config:
  mongo2_data:
  mongo2_config:
  mongo3_data:
  mongo3_config:
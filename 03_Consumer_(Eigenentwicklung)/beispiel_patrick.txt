// Beispiel subscriber von Patrick
package mainer //reference only

import (
	"encoding/json"
	"log"
	"os"

	"github.com/streadway/amqp"
)

// failOnError is a helper function to log error messages
func failOnError(err error, msg string) {
	if err != nil {
		log.Fatalf("%s: %s", msg, err)
	}
}

type StockEvent struct {
	Company   string  `json:"company"`
	EventType string  `json:"eventType"`
	Price     float64 `json:"price"`
}

func subscriber(conn *amqp.Connection, queueName string) {
	ch, err := conn.Channel()
	failOnError(err, "Failed to open a channel")
	defer ch.Close()

	q, err := ch.QueueDeclare(
		queueName, // name of the queue
		false,     // durable
		false,     // delete when unused
		false,     // exclusive
		false,     // no-wait
		nil,       // arguments
	)
	failOnError(err, "Failed to declare a queue")

	msgs, err := ch.Consume(
		q.Name, // queue
		"",     // consumer
		true,   // auto-ack
		false,  // exclusive
		false,  // no-local
		false,  // no-wait
		nil,    // args
	)
	failOnError(err, "Failed to register a consumer")

	for d := range msgs {
		var news NewsEvent
		err := json.Unmarshal(d.Body, &news)
		if err != nil {
			log.Printf("Failed to unmarshal JSON: %s", err)
			continue
		}
		log.Printf(" [x] Received %s", news)

	}
}

func getEnvWithDefault(key, fallback string) string {
	value := os.Getenv(key)
	if value == "" {
		return fallback
	}
	return value
}

func main() {
	rabbitMQConnectionString := getEnvWithDefault("RABBITMQ_URL", "amqp://stockmarket:supersecret123@localhost:5672/")

	conn, err := amqp.Dial(rabbitMQConnectionString)

	failOnError(err, "Failed to connect to RabbitMQ")
	defer conn.Close()

	stocks := []string{"MSFT", "TSLA", "AAPL"}

	for _, stock := range stocks {
		go stockPublisher(conn, stock)
	}

	log.Printf("All stock publishers are running. Press CTRL+C to exit.")
	select {}
}
